<!--
(c) Copyright Microsoft Corporation.
This source is subject to the Microsoft Public License (Ms-PL).
Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
All other rights reserved.
-->
<my:Inspector
	xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'
	xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'
	x:Class='Snoop.PropertyGrid2'
	xmlns:my='clr-namespace:Snoop'
	x:Name='PropertyGrid'
	MinHeight="0" MinWidth="0">

	<Grid.Resources>
		<ResourceDictionary>

			<ContextMenu x:Key='PropertyMenu'>
				<MenuItem Command='{x:Static my:PropertyInspector.DelveCommand}' CommandParameter='{Binding}'>
					<MenuItem.Header>
						<TextBlock Style="{x:Null}" Text="Delve"/>
					</MenuItem.Header>
				</MenuItem>
				<MenuItem Command='{x:Static my:PropertyInspector.DelveBindingCommand}' CommandParameter='{Binding}'>
					<MenuItem.Header>
						<TextBlock Style="{x:Null}" Text="Delve Binding"/>
					</MenuItem.Header>
				</MenuItem>
				<MenuItem Command='{x:Static my:PropertyInspector.DelveBindingExpressionCommand}' CommandParameter='{Binding}'>
					<MenuItem.Header>
						<TextBlock Style="{x:Null}" Text="Delve BindingExpression"/>
					</MenuItem.Header>
				</MenuItem>
				<MenuItem Command='{x:Static my:PropertyGrid2.ShowBindingErrorsCommand}' CommandParameter='{Binding}'>
					<MenuItem.Header>
						<TextBlock Style="{x:Null}" Text="Display Binding Errors"/>
					</MenuItem.Header>
				</MenuItem>
				<MenuItem Command='{x:Static my:PropertyGrid2.ClearCommand}' CommandParameter='{Binding}'>
					<MenuItem.Header>
						<TextBlock Style="{x:Null}" Text="Clear/Reset"/>
					</MenuItem.Header>
				</MenuItem>
			</ContextMenu>

			<Style TargetType='{x:Type GridViewColumnHeader}'>
				<Setter Property='Command' Value='{x:Static my:PropertyGrid2.SortCommand}'/>
			</Style>

			<ControlTemplate x:Key='BreakpointTemplate' TargetType="{x:Type CheckBox}">
				<Grid>
					<Image Name='Icon' Source='{DynamicResource NoBreakpoint}' Width='12' Height='12'/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsChecked" Value="True">
						<Setter Property="Source" Value="{DynamicResource Breakpoint}" TargetName="Icon"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>

			<my:ValueEditorTemplateSelector x:Key='EditorSelector'>
				<my:ValueEditorTemplateSelector.StandardTemplate>
					<DataTemplate>
						<my:StandardValueEditor PropertyType='{Binding PropertyType}' Value='{Binding Value, Mode=TwoWay}' IsSelected='{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}' IsEditable='{Binding CanEdit}'/>
					</DataTemplate>
				</my:ValueEditorTemplateSelector.StandardTemplate>

				<my:ValueEditorTemplateSelector.EnumTemplate>
					<DataTemplate>
						<my:EnumValueEditor PropertyType='{Binding PropertyType}' Value='{Binding Value, Mode=TwoWay}' IsSelected='{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}' IsEditable='{Binding CanEdit}'/>
					</DataTemplate>
				</my:ValueEditorTemplateSelector.EnumTemplate>

				<my:ValueEditorTemplateSelector.BoolTemplate>
					<DataTemplate>
						<my:BoolValueEditor PropertyType='{Binding PropertyType}' Value='{Binding Value, Mode=TwoWay}' IsSelected='{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}' IsEditable='{Binding CanEdit}'/>
					</DataTemplate>
				</my:ValueEditorTemplateSelector.BoolTemplate>

				<my:ValueEditorTemplateSelector.BrushTemplate>
					<DataTemplate>
						<my:BrushValueEditor PropertyType='{Binding PropertyType}' Value='{Binding Value, Mode=TwoWay}' IsSelected='{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}' IsEditable='{Binding CanEdit}'/>
					</DataTemplate>
				</my:ValueEditorTemplateSelector.BrushTemplate>
			</my:ValueEditorTemplateSelector>

			<DataTemplate x:Key='ValueSourceTemplate'>
				<TextBlock Style="{x:Null}" Text='{Binding ValueSource.BaseValueSource}' Height='16' ContextMenu='{StaticResource PropertyMenu}'>
					<TextBlock.ToolTip>
						<TextBlock Style="{x:Null}" Text="{Binding ValueSource.BaseValueSource}"/>
					</TextBlock.ToolTip>
				</TextBlock>
			</DataTemplate>

			<DataTemplate x:Key="textBlockDataTemplate">
				<TextBlock Style="{x:Null}" Text="{Binding}"/>
			</DataTemplate>
		</ResourceDictionary>
	</Grid.Resources>

	<Grid.RowDefinitions>
		<RowDefinition Height='*'/>
	</Grid.RowDefinitions>

	<ListView MinHeight="0" MinWidth="0" x:Name="ListView" IsSynchronizedWithCurrentItem="True"
						ItemsSource='{Binding ElementName=PropertyGrid, Path=Properties}'
						HorizontalContentAlignment='Stretch'
						SelectedItem='{Binding ElementName=PropertyGrid, Path=Selection, Mode=TwoWay}'
						Grid.RowSpan="2"
						>
		<ListView.ItemContainerStyle>
			<Style TargetType='{x:Type ListViewItem}'>
				<Style.Triggers>
					<DataTrigger Binding='{Binding IsLocallySet}' Value='False'>
						<Setter Property='Foreground' Value='Gray'/>
					</DataTrigger>
					<DataTrigger Binding='{Binding IsOdd}' Value='False'>
						<Setter Property='Background' Value='#FFEAEAEA'/>
					</DataTrigger>
					<DataTrigger Binding='{Binding IsExpression}' Value='True'>
						<Setter Property='Background' Value='LightGreen'/>
					</DataTrigger>
					<DataTrigger Binding='{Binding IsAnimated}' Value='True'>
						<Setter Property='Background' Value='LightSalmon'/>
					</DataTrigger>
					<DataTrigger Binding='{Binding IsInvalidBinding}' Value='True'>
						<Setter Property='Background' Value='Red'/>
						<Setter Property="Foreground" Value="White"/>
					</DataTrigger>
					<DataTrigger Binding='{Binding IsVisible}' Value='False'>
						<Setter Property='Visibility' Value='Collapsed'/>
					</DataTrigger>
					<Trigger Property='IsSelected' Value='True'>
						<Setter Property='Background' Value='LightGray'/>
					</Trigger>
					<DataTrigger Binding='{Binding HasChangedRecently}' Value='True'>
						<Setter Property='Background' Value='Yellow'/>
					</DataTrigger>
				</Style.Triggers>
			</Style>
		</ListView.ItemContainerStyle>
		<ListView.View>
			<GridView ColumnHeaderTemplate="{StaticResource textBlockDataTemplate}">
				<GridViewColumn Width='25'>
					<GridViewColumn.CellTemplate>
						<DataTemplate>
							<CheckBox IsChecked='{Binding BreakOnChange}' Template='{StaticResource BreakpointTemplate}'>
								<CheckBox.ToolTip>
									<TextBlock Style="{x:Null}" Text="Set a debug breakpoint"/>
								</CheckBox.ToolTip>
							</CheckBox>
						</DataTemplate>
					</GridViewColumn.CellTemplate>
				</GridViewColumn>
				<GridViewColumn Header="Name" Width='200' >
					<GridViewColumn.CellTemplate>
						<DataTemplate>
							<TextBlock Style="{x:Null}" Text='{Binding DisplayName}' Height='15' MouseLeftButtonDown='HandleNameClick' ContextMenu='{StaticResource PropertyMenu}'>
								<TextBlock.ToolTip>
									<TextBlock Style="{x:Null}" Text="{Binding DisplayName}"/>
								</TextBlock.ToolTip>
							</TextBlock>
						</DataTemplate>
					</GridViewColumn.CellTemplate>
				</GridViewColumn>
				<GridViewColumn Header="Value" Width='143' CellTemplateSelector='{StaticResource EditorSelector}'/>

				<GridViewColumn Header="ValueSource" Width='143'>
					<GridViewColumn.CellTemplate>
						<DataTemplate>
							<ContentControl x:Name='ContentHost' Content='{Binding}' ContentTemplate='{StaticResource ValueSourceTemplate}'/>
						</DataTemplate>
					</GridViewColumn.CellTemplate>
				</GridViewColumn>

				<GridViewColumn Header="Binding Errors" Width='200'>
					<GridViewColumn.CellTemplate>
						<DataTemplate>
							<TextBlock Style="{x:Null}" Text='{Binding BindingError}' Height='15'>
								<TextBlock.ToolTip>
									<TextBlock Style="{x:Null}" Text="{Binding BindingError}"/>
								</TextBlock.ToolTip>
							</TextBlock>
						</DataTemplate>
					</GridViewColumn.CellTemplate>
				</GridViewColumn>

			</GridView>
		</ListView.View>
	</ListView>
</my:Inspector>